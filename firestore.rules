rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // R√®gles pour les utilisateurs
    match /users/{userId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == userId ||
         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'admin'));
    }
    

    
    // R√®gles pour les professionnels
    match /professionals/{professionalId} {
      allow read; // Permettre la lecture publique des profils professionnels
      allow write: if request.auth != null && 
        (request.auth.uid == professionalId ||
         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'admin'));
    }
    
    // R√®gles pour les patients - ACC√àS √âLARGI POUR LES PROFESSIONNELS
    match /patients/{patientId} {
      // Lecture : par le patient propri√©taire OU par tous les professionnels authentifi√©s
      allow read: if request.auth != null && 
        (request.auth.uid == patientId || 
         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'professional');
      
      // √âcriture : par le patient propri√©taire uniquement
      allow write: if request.auth != null && request.auth.uid == patientId;
      
      // Mise √† jour sp√©cifique : permettre aux professionnels de mettre √† jour les r√©f√©rences de dossiers m√©dicaux ET l'archivage
      allow update: if request.auth != null && 
        (request.auth.uid == patientId || 
         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'professional' &&
          // V√©rifier que seuls les champs autoris√©s sont modifi√©s
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['latestMedicalRecord', 'medicalRecordIds', 'updatedAt', 'isArchived', 'archivedAt']))));
    }
    
    // R√®gles pour les dossiers m√©dicaux (sous-collection)
    match /patients/{patientId}/medicalRecords/{recordId} {
      // Lecture : par le patient propri√©taire OU le professionnel qui a cr√©√© le dossier
      allow read: if request.auth != null && 
        (request.auth.uid == patientId || 
         request.auth.uid == resource.data.professionalId);
      
      // Cr√©ation : par les professionnels de sant√© authentifi√©s
      allow create: if request.auth != null && 
        request.resource.data.professionalId == request.auth.uid;
      
      // Mise √† jour : par le professionnel qui a cr√©√© le dossier
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.professionalId;
    }
    
    // R√®gles pour les requ√™tes collectionGroup sur les dossiers m√©dicaux
    match /{path=**}/medicalRecords/{recordId} {
      // Permettre aux professionnels de lire tous les dossiers m√©dicaux
      allow read: if request.auth != null && 
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'professional');
    }
    
    // R√®gles pour les r√©servations - TEMPORAIREMENT PLUS PERMISSIVES POUR LES TESTS
    match /bookings/{bookingId} {
      // Lecture : par tous les utilisateurs authentifi√©s
      allow read: if request.auth != null;
      
      // Cr√©ation : par tous les utilisateurs authentifi√©s
      allow create: if request.auth != null;
      
      // Mise √† jour : par tous les utilisateurs authentifi√©s
      allow update: if request.auth != null;
      
      // Suppression : par tous les utilisateurs authentifi√©s
      allow delete: if request.auth != null;
    }
    
    // R√®gles pour les paiements PayDunya - TEMPORAIREMENT PLUS PERMISSIVES POUR LES TESTS
    match /payments/{paymentId} {
      // Lecture : par tous les utilisateurs authentifi√©s
      allow read: if request.auth != null;
      
      // Cr√©ation : par tous les utilisateurs authentifi√©s
      allow create: if request.auth != null;
      
      // Mise √† jour : par tous les utilisateurs authentifi√©s
      allow update: if request.auth != null;
    }
    
    // R√®gles pour les conversations
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants;
    }
    
    // R√®gles pour les messages dans les conversations
    match /conversations/{conversationId}/messages/{messageId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
    }
    
    // R√®gles pour le contenu (articles, conseils, etc.) - ACC√àS PUBLIC COMPLET
    match /content/{contentId} {
      // Permettre la lecture publique compl√®te sans authentification
      allow read: if true;
      // Permettre l'√©criture seulement aux utilisateurs connect√©s
      allow write: if request.auth != null;
    }
    
    // R√®gles pour les √©v√©nements de calendrier
    match /calendar_events/{eventId} {
      // Lecture : autoris√©e pour tous les utilisateurs authentifi√©s (patients et professionnels)
      allow read: if request.auth != null;
      
      // Cr√©ation : autoris√©e seulement si l'utilisateur authentifi√© est le propri√©taire du cr√©neau
      allow create: if request.auth != null && 
        request.resource.data.professionalId == request.auth.uid;
      
      // Mise √† jour et suppression : autoris√©es seulement pour le propri√©taire du cr√©neau
      allow update, delete: if request.auth != null && 
        resource.data.professionalId == request.auth.uid;
    }
    
    // R√®gles pour les notifications
    match /notifications/{notificationId} {
      // Lecture : par l'utilisateur destinataire OU admin
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId ||
         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'admin'));
      
      // Cr√©ation : par tous les utilisateurs authentifi√©s (pour envoyer des notifications)
      allow create: if request.auth != null;
      
      // Mise √† jour : par l'utilisateur destinataire OU admin
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.userId ||
         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'admin'));
    }
    
    // üõ°Ô∏è ADMIN ‚Äî acc√®s bas√© sur le type dans Firestore (PLAC√â √Ä LA FIN)
    match /{document=**} {
      allow read, write: if request.auth != null &&
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'admin');
    }
  }
}