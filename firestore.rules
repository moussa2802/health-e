rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Règles pour les patients
    match /patients/{patientId} {
      // Un patient peut lire et modifier son propre profil
      allow read, write: if request.auth != null && request.auth.uid == patientId;
      
      // Règles pour les dossiers médicaux des patients
      match /medicalRecords/{recordId} {
        // Un patient peut lire et écrire ses propres dossiers médicaux
        allow read, write: if request.auth != null && request.auth.uid == patientId;
      }
    }
    
    // Règles pour les professionnels
    match /professionals/{professionalId} {
      // Un professionnel peut lire et modifier son propre profil
      allow read, write: if request.auth != null && request.auth.uid == professionalId;
      
      // Les patients peuvent lire les profils des professionnels
      allow read: if request.auth != null;
    }
    
    // Règles pour les utilisateurs
    match /users/{userId} {
      // Un utilisateur peut lire et modifier son propre profil
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Règles pour les rendez-vous
    match /bookings/{bookingId} {
      // Les utilisateurs authentifiés peuvent lire et écrire leurs propres rendez-vous
      allow read, write: if request.auth != null && 
        (resource.data.patientId == request.auth.uid || 
         resource.data.professionalId == request.auth.uid);
    }
    
    // Règles pour les événements du calendrier
    match /calendar_events/{eventId} {
      // Les professionnels peuvent gérer leurs événements
      allow read, write: if request.auth != null && 
        resource.data.professionalId == request.auth.uid;
    }
    
    // Règles pour les conversations
    match /conversations/{conversationId} {
      // Les participants peuvent lire et écrire dans leurs conversations
      allow read, write: if request.auth != null && 
        (resource.data.patientId == request.auth.uid || 
         resource.data.professionalId == request.auth.uid);
    }
    
    // Règles pour les messages
    match /conversations/{conversationId}/messages/{messageId} {
      // Les participants peuvent lire et écrire des messages
      allow read, write: if request.auth != null && 
        (get(/databases/$(database)/documents/conversations/$(conversationId)).data.patientId == request.auth.uid || 
         get(/databases/$(database)/documents/conversations/$(conversationId)).data.professionalId == request.auth.uid);
    }
    
    // Règles pour les notifications
    match /notifications/{notificationId} {
      // Les utilisateurs peuvent lire et écrire leurs propres notifications
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
    }
    
    // Règles pour les paiements
    match /payments/{paymentId} {
      // Les utilisateurs peuvent lire leurs propres paiements
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
    }
    
    // Règles pour les transactions de revenus
    match /revenue_transactions/{transactionId} {
      // Un professionnel peut lire et écrire ses propres transactions
      allow read, write: if request.auth != null && 
        resource.data.professionalId == request.auth.uid;
    }
    
    // Règles pour les retraits des professionnels
    match /withdrawals/{withdrawalId} {
      // Un professionnel peut lire et écrire ses propres retraits
      allow read, write: if request.auth != null && 
        resource.data.professionalId == request.auth.uid;
    }
    
    // Règles pour les demandes de retrait
    match /withdrawalRequests/{requestId} {
      // Un professionnel peut créer une demande où professionalId == auth.uid et status == "pending"
      allow create: if request.auth != null && 
        request.resource.data.professionalId == request.auth.uid && 
        request.resource.data.status == "pending";
      
      // Un professionnel peut lire uniquement ses propres demandes
      allow read: if request.auth != null && 
        resource.data.professionalId == request.auth.uid;
      
      // Un professionnel peut mettre à jour uniquement ses propres demandes (limité)
      allow update: if request.auth != null && 
        resource.data.professionalId == request.auth.uid &&
        // Ne peut pas modifier amount, method, professionalId après création
        request.resource.data.amount == resource.data.amount &&
        request.resource.data.method == resource.data.method &&
        request.resource.data.professionalId == resource.data.professionalId;
      
      // Les admins peuvent lire toutes les demandes et les traiter
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }
    
    // Règles pour les tickets de support
    match /supportTickets/{ticketId} {
      // Les utilisateurs peuvent lire et écrire leurs propres tickets
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
    }
  }
}
